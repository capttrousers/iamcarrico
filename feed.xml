<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>I. Am. Carrico.</title>
		<description></description>
		<link>http://iamcarrico.com</link>
		
			<item>
				<title>Loading My Site in the First Packet Response</title>
				<description>&lt;p&gt;If you&amp;#39;ve been on my site before, you may have noticed a few changes in the past week. Fonts have been changed up, desgin moved around, and most importantly the site now only loads over https. What is underneath these changes though is much greater, and allows my site to always load in the first packet response in the server. Thus making the load time for my site only rely on latency between a user and my server, and a small piece of server process time. The outcome is that this page should load far below the 1000ms threshold.&lt;/p&gt;

&lt;h1 id=&quot;performance-and-1000ms&quot;&gt;Performance and 1000ms&lt;/h1&gt;

&lt;p&gt;Performance matters, this has been made clear. &lt;a href=&quot;https://twitter.com/igrigorik&quot;&gt;Ilya Grigorik&lt;/a&gt; made his famous talk &lt;a href=&quot;https://www.youtube.com/watch?v=Il4swGfTOSM&quot;&gt;&amp;quot;Breaking the 1000ms Time to Glass Mobile Barrier&amp;quot;&lt;/a&gt; which goes deep into why having a fast, performant site is vital. He also goes into some of the many challenges that are apart of getting content to a user that quickly. For many sites, it is more than just moving JavaScript to the footer, or using a CDN. It takes reevaluating how we deliver out content, and taking into effect the limits of HTTP 1.1.&lt;/p&gt;

&lt;p&gt;I set off a few weeks ago, armed with knowledge of the TCP protocol, HTTP 1.1 standard, and a little bit of gumption (and a touch of &lt;a href=&quot;http://www.compassboxwhisky.com/&quot;&gt;scotch&lt;/a&gt;, for good measure), to deliver my site as fast as I could. And I have made immense progress, and decided to show the source code for this site and my server off to the public.&lt;/p&gt;

&lt;h1 id=&quot;the-code&quot;&gt;The Code&lt;/h1&gt;

&lt;p&gt;I had already built my site using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, and I knew I wanted to preserve a static site. Besides simplicity, it also removed the need for a complex server setup, and allowed for more simple hosting. I had already been using GitHub pages for my host, and while it was very fast, it was not enough for my gluttony of speed. I had already made sure my code was minimized and gzipped through the &lt;a href=&quot;https://github.com/iamcarrico/generator-poole&quot;&gt;Mr. Poole Jekyll Tools&lt;/a&gt;, but my PageSpeed score was still lacking. I needed to look beyond just traditional tools if I wanted to break the speed barrier.&lt;/p&gt;

&lt;h2 id=&quot;first-load-and-beyond&quot;&gt;First Load and Beyond&lt;/h2&gt;

&lt;p&gt;I wanted for my site to load in the first packet response, but also be just as fast for more subsequent page load. This presented an interesting challenge, to ensure every page loaded with the same speed as the first. In my testing, I had found that either I had to load my CSS assets inline, for the first page load, or include them as a link tag for subsequent pulls from the browser cache. If I did the former, the first page load would be fast, but subsequent might take longer. The latter would create blocking on the first load, but subsequent loads would be faster.&lt;/p&gt;

&lt;p&gt;I needed to find some middle ground. I needed for two different headers to present depending if this was the first page load or if there was already the file in the cache. Using Varnish edge-side include (ESI) tags, I was able to create a dynamic header, depending on the presence of certain cookies in the browser. If the cookies did not exist, then the CSS would be inlined, and then loaded asnycronously through &lt;a href=&quot;https://github.com/filamentgroup/loadCSS&quot;&gt;LoadCSS&lt;/a&gt;. This would ensure the CSS was in the header for the second page load, where just the plain link tags would be added.&lt;/p&gt;

&lt;p&gt;The result is always using the most efficient method of delivery, so that the page will always load quickly. In theory, Varnish will allow caching of each page in pieces, so that it has a copy of the main portion of the body and another for just the header scripts. This should ensure the most efficient delivery of assets from the server.&lt;/p&gt;

&lt;h2 id=&quot;font-loading&quot;&gt;Font Loading&lt;/h2&gt;

&lt;p&gt;Like most frontend developers, I was unhappy with the current methods of loading fonts for my website. It seemed that I was stuck between having to choose between fonts holding up rendering of the page, or a perpetual FOUC on every page load as an asynchronous load happens. I wasn&amp;#39;t very happy with either, so instead I used a similar method as the CSS file loading. On the first page load, the fonts are loaded with LoadCSS, which will cause a small FOUC on the first load. From the point forward, they are put in a link tag, ensuring the browser cache loads them from that point forward.&lt;/p&gt;

&lt;p&gt;There is still much to be desired with this method though. The fonts currently load with the woff fonts being base64 encoded into the css file, then the rest of the font types optionally loading. Although this works for the majority of browsers, there is still bloat for browsers that do not support woff. In the future, I would like to create a JavaScript test to figure out which font type is used for each browser, and load only the required on. As of yet, I have not been able to figure out the best way to do that, outside of user agent sniffing.&lt;/p&gt;

&lt;h1 id=&quot;the-server&quot;&gt;The Server&lt;/h1&gt;

&lt;p&gt;Clearly, once I needed to use custom ESI tags, I needed to setup my own server. For this, I employed the use of &lt;a href=&quot;http://www.ansible.com/home&quot;&gt;Ansible&lt;/a&gt;, to manage my server&amp;#39;s configuration. I also used &lt;a href=&quot;&quot;&gt;Vagrant&lt;/a&gt; to be able to create a local environment for me to utilize. The current playbooks I am using are located on my &lt;a href=&quot;https://github.com/iamcarrico/iamcarrico.server&quot;&gt;GitHub profile&lt;/a&gt;, and show the full configuration of my site.&lt;/p&gt;

&lt;p&gt;My site had officially become &amp;quot;almost static&amp;quot;, remaining static for all but the delivery of CSS assets. After a little bit of research and testing, I setup an &lt;a href=&quot;http://nginx.com/&quot;&gt;nginx&lt;/a&gt; server to deliver a static site to Varnish, which would dynamically add in the header information. After some recomendations from other developers, I created the production server on &lt;a href=&quot;www.digitalocean.com/?refcode=ad7f8c567c36&quot;&gt;Digital Ocean&lt;/a&gt;. Since it was most familiar, I employed the use of PHP to check the existance of CSS files, and deliver them dynamically. Simple so far, right?&lt;/p&gt;

&lt;h2 id=&quot;a-wrench:-https&quot;&gt;A Wrench: HTTPS&lt;/h2&gt;

&lt;p&gt;The realization that I needed my own server also opened up the ability for me to serve the site via https. Jumping on the chance, I knew that Varnish was incapable of serving a site via https. Adding on another layer, I had nginx server the static site to varnish, that served the site to another nginx server. The largest benefit, I had the added benefit of being able to also serve the site with SPDY. Alas, nginx still does not allow for the server pushing assets, which will cause for another review of how the server delivers assets when it can.&lt;/p&gt;

&lt;p&gt;As a note, having everything be delivered via https does require an extra handshake to be done by the server. Although this does hurt performance, I believe the round trip of latency is well worth it to ensure user&amp;#39;s privacy. As there is a single form on my site, I rather that always be submitted over a secure connection then to risk any of my users information at the sake of one round trip.&lt;/p&gt;

&lt;h2 id=&quot;no-more-simpleform&quot;&gt;No More Simpleform&lt;/h2&gt;

&lt;p&gt;Previously, I had used &lt;a href=&quot;http://getsimpleform.com/&quot;&gt;Simpleform&lt;/a&gt; to collect the one contact us form on the site. I realized (after I went live) that Simpleform does not allow submitting over https. Not wanting users to have to submit data without a little protection, I needed another quick solution for users to submit information to. I quickly wrote a short PHP script that will filter any input, and if there was all the required fields, will create a new issue on a private GitHub repository. It is currently lacking, since it does not provide interactive responses from the server, but it will work for my current needs. Most importantly, it ensures all communication between users and my site is done securely.&lt;/p&gt;

&lt;h1 id=&quot;what-about-a-cdn?&quot;&gt;What About a CDN?&lt;/h1&gt;

&lt;p&gt;The one piece I am missing with this setup is to deliver assets via a CDN. I had checked and tested several options that are available. Every one either did not have the support I needed (read: wanted), or the support I wanted was too expensive for my little blog. Probably the most advanced CDN I was able to find was &lt;a href=&quot;http://www.maxcdn.com/&quot;&gt;MaxCDN&lt;/a&gt;, which if it was not for the cost to deliver different headers based on cookies, would have worked.&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;p&gt;So far, the results are promising. Both &lt;a href=&quot;https://developer.yahoo.com/yslow/&quot;&gt;yslow&lt;/a&gt; and &lt;a href=&quot;http://developers.google.com/speed/pagespeed/insights/&quot;&gt;Google&amp;#39;s PageSpeed&lt;/a&gt; give me a 98% on the home page. Some &lt;a href=&quot;http://www.webpagetest.org/&quot;&gt;webpagetest.org&lt;/a&gt; runs give me mostly As, and a B for the Google Analytics score. I know that some more tuning needs to be done to ensure the server is setup 100% correctly, but there is still a fast first byte. Some &amp;quot;in the field&amp;quot; tests I did, generally ensure a very fast load. I did notice early on that the DNS lookup was always very slow. I quickly moved over to &lt;a href=&quot;http://aws.amazon.com/route53/&quot;&gt;Amazon&amp;#39;s Route 53&lt;/a&gt; to try and ensure a better response from DNS servers.&lt;/p&gt;

&lt;h2 id=&quot;whats-next?&quot;&gt;Whats Next?&lt;/h2&gt;

&lt;p&gt;The web is always evolving, as is any good website. My work is far from complete when it comes to performance. I have to tune Varnish and nginx to ensure that I am getting the most out of caching and performance on the server. I am also keeping an eye on nginx support of SPDY for its adoption of server push. Any suggestions or ideas are always appreciated, as I know I will be toying with this for some time to come.&lt;/p&gt;

&lt;h2 id=&quot;...-but-the-code!&quot;&gt;... but the CODE!&lt;/h2&gt;

&lt;p&gt;As of today, I am putting the entirety of my codebase on GitHub for all to see. Certainly, it is not perfect yet, and I am still updating and changing constantly. The Ansible scripts and Vagrantfile to create your own server can be found at https://github.com/iamcarrico/iamcarrico.server. And the site itself, created by Jekyll, is at https://github.com/iamcarrico/iamcarrico.&lt;/p&gt;
</description>
				<published>2014-10-02 04:00:00 -0500</published>
				<link>http://iamcarrico.com/writings/loading-my-site-in-first-packet-response/</link>
			</item>
		
			<item>
				<title>Jekyll Workflow Part 2: Automation with Gulp</title>
				<description>&lt;p&gt;&lt;img src=&quot;/img/2014/gulpjs.png&quot; alt=&quot;Gulp.js&quot;&gt;
The &lt;a href=&quot;/writings/jekyll-workflow-p1-building/&quot;&gt;first blog post&lt;/a&gt; in this series talked about how to use the &lt;a href=&quot;https://github.com/iamcarrico/generator-poole&quot;&gt;Mr. Poole Generator&lt;/a&gt; to create a custom Jekyll site. The generator packs in many features to create amazing blogs or static sites. Probably the most powerful portion of the generator is the &lt;a href=&quot;http://gulpjs.com&quot;&gt;Gulp.js&lt;/a&gt; tasks that come bundled in the &lt;a href=&quot;https://github.com/iamcarrico/gulp-poole&quot;&gt;Gulp tools for Poole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post will go over the main tasks that Mr. Poole runs, and how they were made. The source code can be found completely at https://github.com/iamcarrico/gulp-poole. The package is also published to npm, therefore it can be installed on any project.&lt;/p&gt;

&lt;h2 id=&quot;sass-compiling&quot;&gt;Sass Compiling&lt;/h2&gt;

&lt;p&gt;Mr. Poole uses &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; to compile our Sass files. He uses several npm tasks to make our lives a little easier, minifying our CSS and adding in vendor-prefixes without having to use Compass&amp;#39;s mixins. To start, grab the required npm packages, and add them to your gulpfile.js.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;compass-options&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-autoprefixer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The task itself pulls the current paths from Compass&amp;#39;s config.rb file. Gulp then sources those files, and pipes them to Compass. A few important pieces to note here is that we have &lt;code&gt;bundle_exec: true&lt;/code&gt; to ensure that Compass runs through bundler. Next, we send the compiled CSS files through &lt;a href=&quot;https://github.com/ai/autoprefixer&quot;&gt;autoprefixer&lt;/a&gt; to ensure we have the proper vendor prefixes on our CSS. Finally, we send the compiled and prefixed CSS to the local css directory and the assets directory used by Jekyll. Finally, we trigger &lt;a href=&quot;#browsersync&quot;&gt;BrowserSync&lt;/a&gt; to reload the CSS files within the browser.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;browserSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;span style=&amp;quot;color: grey&amp;quot;&amp;gt;Running:&amp;lt;/span&amp;gt; Sass compiling&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/**/*.scss&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;config_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./config.rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;bundle_exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;last 2 versions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt; 1%&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This task, just like any of the tasks within the gulpfile, can be overriden with ones within your project&amp;#39;s own gulpfile. Just ensure that the task name is the same as the task in Mr. Poole&amp;#39;s gulpfile.&lt;/p&gt;

&lt;h2 id=&quot;image-minification&quot;&gt;Image Minification&lt;/h2&gt;

&lt;p&gt;To minify images, Mr. Poole first checks to see if any images have changed since the task last ran. If any changes have occurred, then he will minify the changed images. This will prevent images from being repeatedly minified, causing extra processing time.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-changed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-imagemin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imagesSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;optimizationLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;jekyll-development&quot;&gt;Jekyll Development&lt;/h2&gt;

&lt;p&gt;The site that we are building is definitely Jekyll, and Mr. Poole will ensure that we have a proper site for production and for development. He does this by giving two different &lt;code&gt;_config.yml&lt;/code&gt; files, one for production and one with overrides for development. By default, Jekyll will pull the &lt;code&gt;_config.yml&lt;/code&gt;, but our Gulp command will also grab the &lt;code&gt;_config.dev.yml&lt;/code&gt; for local development.&lt;/p&gt;

&lt;p&gt;By default, Mr. Poole will turn off minification for stylesheets and JavaScript, show draft content, and hide anything in the analytics.html file. Any other variable within the config file can also be overridden just by adding values to the &lt;code&gt;_config.dev.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-dev&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;browserSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;span style=&amp;quot;color: grey&amp;quot;&amp;gt;Running:&amp;lt;/span&amp;gt; $ jekyll build&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bundle&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--config=_config.yml,_config.dev.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;inherit&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Gulp task itself just runs the &lt;code&gt;jekyll build&lt;/code&gt; command, as we would do normally if we were not using Gulp. Mr. Poole always wants to make sure we are using the right gems as well, so he will always choose to run commands through &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;watching-file-changes&quot;&gt;Watching File Changes&lt;/h2&gt;

&lt;p&gt;All of these tasks wouldn&amp;#39;t be useful without Gulp also watching our files, ensuring that any changes in files will re-run Gulp tasks. Gulp makes this incredibly simple just by the &lt;code&gt;gulp.watch()&lt;/code&gt;. The command takes two arguments, the first is the paths to watch, the second is the command   (or array of commands) to run.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/**/*.scss&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imagesSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;runSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-rebuild&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-rebuild&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The task for images utilizes &lt;a href=&quot;https://github.com/OverZealous/run-sequence&quot;&gt;run-sequence&lt;/a&gt; to ensure the images are minfied before being updated in the Jekyll site.&lt;/p&gt;

&lt;h2 id=&quot;browsersync&quot;&gt;BrowserSync&lt;/h2&gt;

&lt;p&gt;The magic that pulls everything together, is &lt;a href=&quot;http://www.browsersync.io/&quot;&gt;BrowserSync&lt;/a&gt;. Instead of using the Jekyll&amp;#39;s built in server, BrowserSync will act as the web server. BrowserSync will also ensure that any updated files will be automatically reloaded into the browser, without the need to refresh. BrowserSync also makes it easy to test multiple devices by ensuring any clicks in one browser are replicated in all other connected browsers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;browserSync&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browserSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;baseDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;_site&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The task itself is just as simple as ensuring the server will be ran from Jekyll&amp;#39;s &lt;code&gt;_site&lt;/code&gt; directory. By running &lt;code&gt;gulp server&lt;/code&gt;, Gulp will run all the previous tasks, including BrowserSync, and launch a browser with the appropriate IP and ports. In the previous tasks, the &lt;code&gt;browserSync.notify()&lt;/code&gt; function will send some HTML to the browser, alerting the user of any changes that are happening.&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-use-it?&quot;&gt;How can I use it?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/iamcarrico/generator-poole&quot;&gt;Mr. Poole Yeoman Generator&lt;/a&gt; is setup to automatically allow the use of these commands. To use it on an existing Jekyll site, copy these commands into your own Gulpfile. You can also install the commands locally with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g gulp-poole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and put the following code in the top of your Gulpfile:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-poole&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The full source code for the Gulp tools in Mr. Poole can be found on my GitHub page at https://github.com/iamcarrico/gulp-poole.&lt;/p&gt;
</description>
				<published>2014-08-28 04:00:00 -0500</published>
				<link>http://iamcarrico.com/writings/jekyll-workflow-p2-gulp/</link>
			</item>
		
			<item>
				<title>Jekyll Workflow Part 1: Building a Site</title>
				<description>&lt;p&gt;&lt;img src=&quot;/img/2014/jekyll.png&quot; alt=&quot;Jekyll.rb&quot;&gt;
&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; has become one of the best static site generators, rising to popularity in no small part because of its use on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. It is incredibly simple and easy to begin making awesome static sites or blogs, with very little effort. This month I am doing a 4 part series of blog posts on how to create, deploy and automate a site on Jekyll, all while ensuring it is as performant as possible. These tools are all used on my own site and several smaller sites that I have worked on. The code is all available on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-site&quot;&gt;Creating a site&lt;/h2&gt;

&lt;p&gt;First off, make sure that all required dependencies are installed. For the Ruby pieces of Jekyll only &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; is needed. Everything else will run through &lt;a href=&quot;http://nodejs.org/download/&quot;&gt;Node.js&lt;/a&gt; and to install the required npm packages:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo bower gulp generator-poole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that everything is installed creating a Jekyll site is as easy as using &lt;a href=&quot;https://github.com/iamcarrico/generator-poole&quot;&gt;Mr. Poole, the Jekyll Site Generator&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo poole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeoman will ask you a few questions about your project and voilà: a fully-featured Jekyll site will be born. Just for you.&lt;/p&gt;

&lt;h2 id=&quot;but-it-is-ugly!&quot;&gt;But it is ugly!&lt;/h2&gt;

&lt;p&gt;Well, yes. But the markup is pretty. And that is what really matters, isn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;More importantly, all CSS and styling have been torn away so that you have full control of your Jekyll site from Day One. It is built to be ultra-flexible and simple to generate the perfect looking site. It makes no assumptions on the best way to do that, except giving the developer Sass and some base extensions to start with.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-it?&quot;&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;Glad you asked. This is where Mr. Poole has worked hard to get the site exactly what it needs. Most of all, it has been finely tuned to make development as easy as possible, while including many best-practices.&lt;/p&gt;

&lt;h3 id=&quot;navigation&quot;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;Navigation is controlled by the data within &lt;code&gt;_data/navigation.yml&lt;/code&gt;. By putting navigation inside a Yaml file we can add on &amp;#39;active&amp;#39; and &amp;#39;active-trail&amp;#39; classes when we are on the active link. A new link can be added easily by adding something like this to the navigation.yml file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Contact&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/contact/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gulp-/-browser-sync&quot;&gt;Gulp / Browser Sync&lt;/h3&gt;

&lt;p&gt;The true power of Mr. Poole&amp;#39;s power lies within the Gulp scripts that will automate many frontend tasks for you. It will compile your Sass, include vendor-prefixes, minify images, run a development server with &lt;a href=&quot;http://www.browsersync.io/&quot;&gt;BrowserSync&lt;/a&gt; and deploy to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To compile all of our Sass files using compass, use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp sass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To ensure all of our images are optimized:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build our Jekyll site and serve it using BrowserSync. This will watch our files and ensure the proper tasks are run for us on their change. It will also automatically update our site, without the need for a refresh, all through BrowserSync. This should be the command that is run the most, as it will also compile the Sass files and minify images.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build our site for production and save the result in &amp;#39;_site&amp;#39;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build the site for production and deploy that code to our gh-pages branch for us:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;asset-pipeline&quot;&gt;Asset pipeline&lt;/h3&gt;

&lt;p&gt;The last piece of the generator is the use of &lt;a href=&quot;https://github.com/ixti/jekyll-assets&quot;&gt;Jekyll Assets&lt;/a&gt; to handle cache busting and minification. It is built to allow for CSS to be developed locally, in an expanded state, then for production it will minify the CSS files. It will also allow for caches to be busted on CSS files and images if they ever change. The forth blog post in this series will go over best practices with the asset pipeline and how to properly utilize it.&lt;/p&gt;

&lt;h2 id=&quot;more-information&quot;&gt;More information&lt;/h2&gt;

&lt;p&gt;This post is just the first in a four part series on how the generator was built and the code that runs it. Although all of this power is given for free using &lt;a href=&quot;https://github.com/iamcarrico/generator-poole&quot;&gt;Mr. Poole&lt;/a&gt;, each post will go into a piece of how the generator runs and how to best take advantage of its power.&lt;/p&gt;
</description>
				<published>2014-08-12 04:00:00 -0500</published>
				<link>http://iamcarrico.com/writings/jekyll-workflow-p1-building/</link>
			</item>
		
			<item>
				<title>Why is SXSW so successful?</title>
				<description>&lt;p&gt;Every year, thousands of people come to Austin, Texas, for the annual &lt;a href=&quot;http://sxsw.com/&quot;&gt;SXSW festival&lt;/a&gt;. And each year it sets record numbers for participants and partygoers that attend. What drives droves of people from across the globe to the city for SXSW? The event is so large that there is not a single reason behind its success, but many. Here are a few I find compelling.&lt;/p&gt;

&lt;h2 id=&quot;anything-can-happen&quot;&gt;Anything can happen&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.youtube.com/watch?v=Mx7yky2C9Gk&quot;&gt;impromptu concerts by Jack White&lt;/a&gt;, to &lt;a href=&quot;http://laughingsquid.com/twitter-wins-sxsw-web-award/&quot;&gt;Twitter&amp;#39;s launch&lt;/a&gt;, and even &lt;a href=&quot;http://www.youtube.com/watch?v=fwwEGjGbxXM&quot;&gt;Bill Murray serving tequila&lt;/a&gt;--- anything can happen at SXSW. My favorite encouter was a few years back, where I was able to be &lt;a href=&quot;http://www.zeldman.com/&quot;&gt;Jeffrey Zeldman&amp;#39;s&lt;/a&gt; impromptu &amp;quot;Sherpa&amp;quot; prior to his presentation. I have met many of my industry&amp;#39;s movers and shakers, as well as some of the &lt;a href=&quot;http://ronenv.com/&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Vermin_Supreme&quot;&gt;interesting&lt;/a&gt; &lt;a href=&quot;https://twitter.com/timoreilly&quot;&gt;people&lt;/a&gt; in the world. In short, you never know what is going to happen any day of the festival. It is just important to keep your eyes and ears open in order to be ready for what the day might bring.&lt;/p&gt;

&lt;h2 id=&quot;austin&amp;#39;s-weather&quot;&gt;Austin&amp;#39;s weather&lt;/h2&gt;

&lt;p&gt;Mid-March in Austin usually comes with temperate climate. Excluding a few years, the weather has been bright and warm. It is a great time to get out of the seasonably cold weather of the north to enjoy some good southern sun. Even this year, with Austin&amp;#39;s varying weather in March, it is looking like the week will be quite beautiful overall.&lt;/p&gt;

&lt;h2 id=&quot;amazing-content&quot;&gt;Amazing content&lt;/h2&gt;

&lt;p&gt;Every year &lt;a href=&quot;https://twitter.com/Hugh_W_Forrest&quot;&gt;Hugh Forrest&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/shawnokeefe&quot;&gt;Shawn O&amp;#39;Keefe&lt;/a&gt; and the rest of the SXSW Interactive team brings in some of the best speakers across the globe. With these speakers comes not just amazing content, but also sparks great conversation. SXSW inspires new and interesting ideas at every turn. I spend most of the week thinking about what the year is going to bring and what new ideas I can apply to my current project.&lt;/p&gt;

&lt;p&gt;Interactive content is not even a third of what SXSW has to offer. The festival also has film, featuring amazing content by talented filmmakers from across the globe. SXSWedu has already begun and they have been sharing innovations across the world of education. Of course, the foundation of SXSW is the music. The music where huge artists, rising stars, and international groups come together and fill Austin&amp;#39;s streets, parks, and bars with new and inspiring sounds.&lt;/p&gt;

&lt;h2 id=&quot;parties,-parties-everywhere&quot;&gt;Parties, parties everywhere&lt;/h2&gt;

&lt;p&gt;I have two rules for the participants SXSW. First, do not pay for your drinks, but always tip your bartender. Second, do not wait to get into a party. During the festival are many events across the city, and there is always a place ready to meet and greet new people. Austinites love the free events that come with SXSW, and I could not agree more. Just remember to RSVP to the events you want to go to and to explore the smaller events all over the city. Some of the bests nights I have had were at holes in the wall on the east side.&lt;/p&gt;

&lt;h2 id=&quot;an-adventure-on-every-corner&quot;&gt;An adventure on every corner&lt;/h2&gt;

&lt;p&gt;So to all of you coming to Austin, welcome! Take in all that the city and SXSW has to offer this week. I look forward to seeing what the festival has in store, and what new innovations (and bands) come out of it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I will be attending SXSW this year. &lt;a href=&quot;https://twitter.com/intent/user?user_id=940528772&quot; class=&quot;twitter&quot; target=&quot;_blank&quot;&gt;Follow me on Twitter&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/iamcarrico&quot;&gt;@iamcarrico&lt;/a&gt; for updates on where I will be during the week.&lt;/em&gt;&lt;/p&gt;
</description>
				<published>2014-03-06 03:00:00 -0600</published>
				<link>http://iamcarrico.com/writings/why-is-sxsw-so-succesful/</link>
			</item>
		
			<item>
				<title>Mobi Sites Are Over, Stop Trying</title>
				<description>&lt;p&gt;I have moments of irrational anger toward articles I find on the internet. Today, I found one such article that was a compare and contrast to the benifits of having a mobile site vs having a responsive site. I will be the first to admit that rebuilding a site&amp;#39;s front end to be responsive is not an cheap task. It takes time, money, and a team willing to redesign not just the look at feel, but also document hierarchy. But that difficulty should not be feared, it should be surmounted.&lt;/p&gt;

&lt;h2 id=&quot;why-i-dislike-mobile-sites&quot;&gt;Why I dislike mobile sites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Search Engine Optimization: Having a non-performant site, having two different domains (or sub-domains), and duplicate content are all elements on a site that can negatively affect SEO. Check out &lt;a href=&quot;https://developers.google.com/webmasters/googleforwebmasters/&quot;&gt;Google Webmaster&amp;#39;s guide&lt;/a&gt; for a lot more information on how SEO can be improved on a site, and what &lt;a href=&quot;https://developers.google.com/webmasters/smartphone-sites/details&quot;&gt;Google recomends for mobile&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;User Experience: Many sites have tried to have a mobile site and a desktop site, and generally linking between the two have always hurt a user&amp;#39;s experience. XKCD has a &lt;a href=&quot;http://xkcd.com/869/&quot;&gt;webcomic humourizing&lt;/a&gt; the poor linking that having a mobile redirect has. These problems are even greater if mobile navigation, content, etc are different on the two sites.&lt;/li&gt;
&lt;li&gt;Mobile Redirects: Most redirects rely on user agent sniffing, which is unreliable at best. There have been a &lt;a href=&quot;http://www.sitepoint.com/why-browser-sniffing-stinks/&quot;&gt;multitude&lt;/a&gt; of &lt;a href=&quot;http://farukat.es/journal/2011/02/499-lest-we-forget-or-how-i-learned-whats-so-bad-about-browser-sniffing&quot;&gt;posts&lt;/a&gt; on this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent&quot;&gt;subject&lt;/a&gt;, so I shall not beat a dead horse, but it goes against the princliples of feature detection, progressive enhancement, and graceful degradation.&lt;/li&gt;
&lt;li&gt;Social sharing: Johhny is on their phone and shares a link from a site&amp;#39;s mobile site on Facebook. Lisa is his friend, sees the link on her desktop and looks at it. Whelp, it is the mobile site and she hates that she cannot see all the content she wants. Moreover, if  share counts are important, there are now have two different sites that are being shared, thus hurting the overall count.&lt;/li&gt;
&lt;li&gt;Budget: The post I read had one excellent point, which is that creating a responsive site will cost more than a templated .mobi site. To create a true responsive site that is mobile-first, we must start the design process from scratch. From my experience, retrofitting a site to be responsive from a current site is far more work than it is worth. That being said, I will always be a proponent of doing the site right once, than poorly twice. If it is not in the budget this year to redesign the site, then put budget away for next year. Less money will be spent long term, and a better product will surface then if a mobile site is used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;responsive-or-bust&quot;&gt;Responsive or bust&lt;/h2&gt;

&lt;p&gt;A website is a company&amp;#39;s image to the world. It is important that a website puts the best foot forward. Mobile sites are dying, and their UX patterns are dying with them. The question between a mobile site or a responsive site is not the right question anymore, but instead is there the time and budget to create a responsive site.&lt;/p&gt;
</description>
				<published>2014-02-12 06:00:00 -0600</published>
				<link>http://iamcarrico.com/writings/mobile-sites-are-over/</link>
			</item>
		
			<item>
				<title>I Am No Designer</title>
				<description>&lt;p&gt;There are many who would count me amongst designers, I am not one of those people. I work with desiners, I can see a good design from a bad one... but I am no designer. This is probably why after years of trying to make a fancy blog, something noteworthy, something catchy to the eye--- I opted instead to bring something simple to the board. Something that would bring what a blog is most needed for, it&amp;#39;s content.&lt;/p&gt;

&lt;p&gt;Thus I present to the world, my personal blog I. Am. Carrico. A little blog of the musings of a web developer, aerialist, libertine and dubious philosopher. Build upon &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; with some lovely &lt;a href=&quot;http://gruntjs.com/&quot;&gt;grunt&lt;/a&gt; and compass magic tossed in... it is a simple, easy place for you to find my thoughts.&lt;/p&gt;

&lt;p&gt;If you are interested in the tools I used to build such a place, check out the &lt;a href=&quot;https://github.com/ChinggizKhan/grunt-poole&quot;&gt;Github repo&lt;/a&gt; I built from the lessons I learned here. It has a grunt template that contains a jekyll site, compass plugins and some magic with compass. It is a good starting point for anybody wanting to learn more about these awesome tools. I will write more soon about deployment and how to use grunt to make you life immesensely easier.&lt;/p&gt;

&lt;p&gt;The Github repo, Mr. Poole--- a jekyll, grunt and compasss template. https://github.com/ChinggizKhan/grunt-poole&lt;/p&gt;
</description>
				<published>2013-05-13 07:00:00 -0500</published>
				<link>http://iamcarrico.com/writings/i-am-no-designer/</link>
			</item>
		
	</channel>
</rss>